
#include <BH1750.h>
#include <Servo.h>
#include <LiquidCrystal_I2C.h>
#include <Adafruit_INA219.h>
#include <Adafruit_SHT31.h>

#define TCAADDR 0x70
#define LCD_ADDR 0x27
#define SHT31_ADDR 0x45
#define INA219_ADDR 0x40

Servo servo_updown;
Servo servo_rightleft;

BH1750 lightMeter;
const uint8_t tca_channels[4] = {1, 2, 3, 4}; // 좌상, 우상, 좌하, 우하
#define NUM_SENSORS 4
int threshold_value = 10000;
int max_diff = 15000;

const int UPDOWN_MIN = 20;
const int UPDOWN_MAX = 70;
const int RIGHTLEFT_MIN = 30;
const int RIGHTLEFT_MAX = 180;

LiquidCrystal_I2C lcd(LCD_ADDR, 20, 4);
Adafruit_INA219 ina219;
Adafruit_SHT31 sht = Adafruit_SHT31();

float sum_temp = 0, sum_hum = 0, sum_volt = 0, sum_current = 0;
int count = 0;
unsigned long lastAvgTime = 0;

void tcaselect(uint8_t i) {
  if (i > 7) return;
  Wire.beginTransmission(TCAADDR);
  Wire.write(1 << i);
  Wire.endTransmission();
}

void setup() {
  Serial.begin(9600);
  Wire.begin();

  servo_rightleft.attach(3);
  servo_updown.attach(11);
  servo_rightleft.write(105);
  servo_updown.write(10);
  delay(1000);

  for (int i = 0; i < NUM_SENSORS; i++) {
    tcaselect(tca_channels[i]);
    delay(10);
    if (lightMeter.begin(BH1750::CONTINUOUS_HIGH_RES_MODE)) {
      Serial.print("센서 "); Serial.print(i); Serial.println(" 초기화 성공");
    } else {
      Serial.print("센서 "); Serial.print(i); Serial.println(" 초기화 실패");
    }
  }

  if (!ina219.begin()) {
    Serial.println("INA219 초기화 실패");
  }
  ina219.setCalibration_32V_1A();  // 기본 보정

  if (!sht.begin(SHT31_ADDR)) {
    Serial.println("SHT31 초기화 실패");
  }

  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("System Loading...");
}

void loop() {
  int topl = readLux(0);
  int topr = readLux(1);
  int botl = readLux(2);
  int botr = readLux(3);

  int topAvg = (topl + topr) / 2;
  int botAvg = (botl + botr) / 2;
  int leftAvg = (topl + botl) / 2;
  int rightAvg = (topr + botr) / 2;

  int currentUD = servo_updown.read();
  int currentRL = servo_rightleft.read();

  int diffUD = topAvg - botAvg;
  if (abs(diffUD) > threshold_value) {
    int move = map(abs(diffUD), threshold_value, max_diff, 1, 10);
    move = constrain(move, 1, 10);
    if (diffUD > 0 && currentUD < UPDOWN_MAX)
      servo_updown.write(min(currentUD + move, UPDOWN_MAX));
    else if (diffUD < 0 && currentUD > UPDOWN_MIN)
      servo_updown.write(max(currentUD - move, UPDOWN_MIN));
  }

  int diffRL = leftAvg - rightAvg;
  if (abs(diffRL) > threshold_value) {
    int move = map(abs(diffRL), threshold_value, max_diff, 1, 10);
    move = constrain(move, 1, 10);
    if (diffRL > 0 && currentRL > RIGHTLEFT_MIN)
      servo_rightleft.write(max(currentRL - move, RIGHTLEFT_MIN));
    else if (diffRL < 0 && currentRL < RIGHTLEFT_MAX)
      servo_rightleft.write(min(currentRL + move, RIGHTLEFT_MAX));
  }

  readSensors();

  if (millis() - lastAvgTime >= 1000) {
    float avg_temp = sum_temp / count;
    float avg_hum = sum_hum / count;
    float avg_volt = sum_volt / count;
    float avg_current = sum_current / count;  // 평균 전류 (보정 전)

    float corrected_current = avg_current * 10.0;  // 보정 계수 적용

    Serial.print("전류 평균(보정 후): "); Serial.print(corrected_current); Serial.println(" mA");

    lcd.setCursor(0, 1);
    lcd.print("Temp: ");
    lcd.print(avg_temp, 1);
    lcd.print(" C     ");

    lcd.setCursor(0, 2);
    lcd.print("Humi: ");
    lcd.print(avg_hum, 1);
    lcd.print(" %     ");

    lcd.setCursor(0, 3);
    lcd.print("Curr: ");
    if (corrected_current >= 1000.0) {
      lcd.print(corrected_current / 1000.0, 2);
      lcd.print(" A   ");
    } else {
      lcd.print(corrected_current, 1);
      lcd.print(" mA  ");
    }

    sum_temp = sum_hum = sum_volt = sum_current = 0;
    count = 0;
    lastAvgTime = millis();
  }

  delay(200);
}

int readLux(uint8_t index) {
  tcaselect(tca_channels[index]);
  delay(50);
  float lux = lightMeter.readLightLevel();
  Serial.print("채널 "); Serial.print(tca_channels[index]);
  Serial.print(" 조도: "); Serial.print(lux);
  Serial.println(" lux");
  return int(lux);
}

void readSensors() {
  float temp = sht.readTemperature();
  float hum = sht.readHumidity();
  float volt = ina219.getBusVoltage_V();
  float current = ina219.getCurrent_mA();

  if (!isnan(temp) && !isnan(hum) && volt > 0.1) {
    sum_temp += temp;
    sum_hum += hum;
    sum_volt += volt;
    sum_current += current;
    count++;
  } else {
    Serial.println("센서 값 오류: T=" + String(temp) + ", H=" + String(hum));
  }
}
